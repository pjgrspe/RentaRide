// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentaRide.Database;

#nullable disable

namespace RentaRide.Migrations
{
    [DbContext(typeof(RARdbContext))]
    partial class RARdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.CarTypesDBModel", b =>
                {
                    b.Property<int>("cartypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartypeID"));

                    b.Property<string>("cartypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cartypeID");

                    b.ToTable("TBL_CarTypes");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.CarsDBModel", b =>
                {
                    b.Property<int>("carID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carID"));

                    b.Property<string>("carColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("carDocuments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("carFuelType")
                        .HasColumnType("bit");

                    b.Property<string>("carInactiveInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("carIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("carLastMaintenance")
                        .HasColumnType("datetime2");

                    b.Property<string>("carLicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("carMake")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("carMileage")
                        .HasColumnType("int");

                    b.Property<string>("carModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("carNextMaintenance")
                        .HasColumnType("datetime2");

                    b.Property<string>("carPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("carStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("carTransmission")
                        .HasColumnType("bit");

                    b.Property<int>("carType")
                        .HasColumnType("int");

                    b.Property<int>("carYear")
                        .HasColumnType("int");

                    b.HasKey("carID");

                    b.HasIndex("carType");

                    b.ToTable("TBL_Cars");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.DriversDBModel", b =>
                {
                    b.Property<int>("driverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("driverID"));

                    b.Property<string>("driverContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("driverEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("driverFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("driverIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("driverLastDutyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("driverLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("driverLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("driverMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("driverOnDuty")
                        .HasColumnType("bit");

                    b.Property<string>("driverPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("driverRegisteredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("driverID");

                    b.ToTable("TBL_Drivers");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.ListingsDBModel", b =>
                {
                    b.Property<int>("listingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("listingID"));

                    b.Property<int>("carID")
                        .HasColumnType("int");

                    b.Property<DateTime>("listingAvailabilityEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("listingAvailabilityStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("listingDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("listingIsRented")
                        .HasColumnType("bit");

                    b.Property<decimal>("listingPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("listingRate")
                        .HasColumnType("int");

                    b.HasKey("listingID");

                    b.HasIndex("carID");

                    b.HasIndex("listingRate");

                    b.ToTable("TBL_Listings");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.OrdersDBModel", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<int>("carID")
                        .HasColumnType("int");

                    b.Property<int>("driverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderBookDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("orderExtraFees")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("orderLocationLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("orderPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderPaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderPickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderPickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("orderRating")
                        .HasColumnType("int");

                    b.Property<string>("orderReservationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("orderReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderReturnLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("orderReview")
                        .HasColumnType("int");

                    b.Property<bool?>("orderStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("orderTotalCost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("orderID");

                    b.HasIndex("carID");

                    b.HasIndex("driverID");

                    b.HasIndex("orderPaymentMethod");

                    b.HasIndex("orderRating");

                    b.HasIndex("userID");

                    b.ToTable("TBL_Orders");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.PayTypesDBModel", b =>
                {
                    b.Property<int>("paytypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paytypeID"));

                    b.Property<string>("paytypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paytypeID");

                    b.ToTable("TBL_PayTypes");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.RatesDBModel", b =>
                {
                    b.Property<int>("listingRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("listingRateID"));

                    b.Property<string>("listingRateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("listingRateID");

                    b.ToTable("TBL_Rates");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.UserDetailsDBModel", b =>
                {
                    b.Property<int>("userDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userDetailID"));

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("user2ndValidID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user2ndValidIDFileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userCityAdd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("userDOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("userDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("userDateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("userDateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("userLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userLicenseFileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userProofofBilling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userProofofBillingFileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userProvinceAdd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userSelfieProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userSelfieProofFileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userStreetAdd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userDetailID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("TBL_UserDetails");
                });

            modelBuilder.Entity("RentaRide.Models.Identity.RentaRideAppUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("userFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("userisActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("userisApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.CarsDBModel", b =>
                {
                    b.HasOne("RentaRide.Database.Database_Models.CarTypesDBModel", "carTypesDBModel")
                        .WithMany()
                        .HasForeignKey("carType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("carTypesDBModel");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.ListingsDBModel", b =>
                {
                    b.HasOne("RentaRide.Database.Database_Models.CarsDBModel", "CarsDBModel")
                        .WithMany()
                        .HasForeignKey("carID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaRide.Database.Database_Models.RatesDBModel", "listingRatesDBModel")
                        .WithMany()
                        .HasForeignKey("listingRate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarsDBModel");

                    b.Navigation("listingRatesDBModel");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.OrdersDBModel", b =>
                {
                    b.HasOne("RentaRide.Database.Database_Models.CarsDBModel", "CarsDBModel")
                        .WithMany()
                        .HasForeignKey("carID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaRide.Database.Database_Models.DriversDBModel", "DriversDBModel")
                        .WithMany()
                        .HasForeignKey("driverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaRide.Database.Database_Models.PayTypesDBModel", "PayTypesDBModel")
                        .WithMany()
                        .HasForeignKey("orderPaymentMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentaRide.Database.Database_Models.RatesDBModel", "RatesDBModel")
                        .WithMany()
                        .HasForeignKey("orderRating");

                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", "RentaRideAppUsers")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarsDBModel");

                    b.Navigation("DriversDBModel");

                    b.Navigation("PayTypesDBModel");

                    b.Navigation("RatesDBModel");

                    b.Navigation("RentaRideAppUsers");
                });

            modelBuilder.Entity("RentaRide.Database.Database_Models.UserDetailsDBModel", b =>
                {
                    b.HasOne("RentaRide.Models.Identity.RentaRideAppUsers", "RentaRideAppUsers")
                        .WithOne()
                        .HasForeignKey("RentaRide.Database.Database_Models.UserDetailsDBModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentaRideAppUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
